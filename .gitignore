module fsm( Clock,Reset,S1,S2,S3, L1,L2,L3);

// I/O ports

output  reg [1:0]   // outputs for controlling traffic lights (00, 01 11 for green, yellow, red)
               L1,  // light for NB SW 4th Avenue 
               L2,  // light for EB SW Harrison Street 
               L3;  // light for WB SW Harrison Street

input Clock, Reset;
                     // sensors for approaching vehicles
input S1,            // Northbound on SW 4th Avenue
      S2,            // Eastbound on SW Harrison Street 
      S3;            // Westbound on SW Harrison Street
      
reg load,count;  
wire timeup;
reg [7:0] value;
parameter flash =2'b00,
          green = 2'b01,
          yellow = 2'b10,
          red = 2'b11;  
parameter true = 1'b1;
parameter false = 1'b0;

// State definition        
parameter state0 = 10'b0000000001,      
          state1 = 10'b0000000010,     
          state2 = 10'b0000000100,     
          state3 = 10'b0000001000,     
          state4 = 10'b0000010000,
          state5 = 10'b0000100000,
          state6 = 10'b0001000000,
          state7 = 10'b0010000000,
          state8 = 10'b0100000000,
          state9 = 10'b1000000000;                    

       
reg [9:0] state, next_state;
counter instantiate(Clock, load, value, count, timeup); 
// Change of state is only at positive edge of clock 

initial
begin
end

        always@(posedge Clock) 
        begin 
        if (Reset)
        state <= state0;         
        else  
        state <= next_state;   //State is changed here to next state
        end
 
 
      always@(state)
      begin 
      
      case (state)

     state0:     begin

           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=red;
              L3=red;
              load=0;
	      value=8'b00000000;      //value of 0 is passed for the counter
              count=0;         
             end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 

     state1:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=green;
              L3=green;
              load=1;
	      value=8'b00001111;      //value of 15 is passed for the counter
              count=0;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state2:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=green;
              L3=green;
              load=0;
	      value=8'b00001111;      //value of 15 is passed for the counter
              count=1;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end

     state3:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=yellow;
              L3=yellow;
              load=1;
	      value=8'b00000101;      //value of 5 is passed for the counter
              count=0;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state4:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=yellow;
              L3=yellow;
              load=0;
	      value=8'b00000101;      //value of 5 is passed for the counter
              count=1;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state5:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=red;
              L3=red;
              load=0;
	      value=8'b00000000;      //value of 0 is passed for the counter
              count=0;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state6:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=green;
              L2=red;
              L3=red;
              load=1;
	      value=8'b00101101;      //value of 45 is passed for the counter
              count=0;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state7:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=green;
              L2=red;
              L3=red;
              load=0;
	      value=8'b00101101;      //value of 45 is passed for the counter
              count=1;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state8:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=yellow;
              L2=red;
              L3=red;
              load=1;
	      value=8'b00001111;      //value of 5 is passed for the counter
              count=0;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
     state9:     begin
    
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=green;
              L2=red;
              L3=red;
              load=0;
	      value=8'b00001111;      //value of 5 is passed for the counter
              count=1;      
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end
              default:begin
              L1=flash;
              L2=flash;
              L3=flash;
              end
             
     endcase 
  end 


// State machine using case statements 
  always@(state,timeup,S1,S2,S3)
  begin 

       case (state)


                   state0:       begin
                                if(timeup)
                               begin                
                  		if(S1 == false  && (S2==false && S3==false))     
                  		next_state= state0;
                                else if(S1==false ||((S2== false || S3==true)|| (S2== true || S3==false)))
                                next_state = state1;
                  		else if(S1==true &&(S2== false || S3==false))  //check if condition                 
                  		next_state = state6;
                   	       end 
                   	      end	
                             

                   state1:	
                                begin
                  		next_state = state2;    //counter is not used as red,red,red exectution itlself gives delay of 1 second
                  		end    

                   state2:	begin
                                if(timeup)
                                begin
                   		next_state = state3;
                   		end 
                                else 
                                next_state=state2;
                                end            
  
                   state3: 	begin
                                if(timeup)
                                begin 
                   		next_state = state4; 
                   		end 
                                else
                                next_state=state3;
                                end         
                  
                    state4: 	begin
                                if(timeup)
                                begin 
                   		next_state = state5; 
                   		end 
                                else
                                next_state=state4;
                                end

                    state5: 	begin
                                if(timeup)
                                begin 
                   		next_state = state6; 
                   		end 
                                else
                                next_state=state5;
                                end

                   state6:
                              
                                begin              
                		if(S1==true &&(S2==false && S3 == false))       
                   		begin
                                next_state = state6; 
                                 end                        //No need to call the counter as execution of red red red takes 1 sec delay
                                else 
                                next_state = state7; 
                  		end
                            
                               
                                 

                   state7:      begin  
                                 if(timeup)
                                 begin  
                   		next_state = state8; 
                                end
                                 else
                                 next_state =state7;
                               
                               end  
state8:	begin
                                if(timeup)
                                begin
                  		next_state = state9;    
                  		end
                                else
                                next_state=state8;
                                end  
state9:	begin
                                if(timeup)
                                begin
                  		next_state = state0;    
                  		end
                                else
                                next_state=state9;
                                end 
                      		default next_state = state0;   
  
     endcase 
 end
 
endmodule

module counter(clk, load, value, count, timeup);
input clk, load, count;
input [7:0] value;
output reg timeup;
reg [7:0] c;
always @(c)
begin
if (c == 0)
timeup = 1;   
else
timeup = 0;        
end
always @(posedge clk)
begin
if (load)
c <= value;
else if (count && (c != 0))
c <= c - 8'b1;
else
c <= c;
end
endmodule
