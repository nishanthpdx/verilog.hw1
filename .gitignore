`timescale 1ms/1ms
module fsm( Clock,Reset,S1,S2,S3, L1,L2,L3); 

// I/O ports

output  reg [1:0]   // outputs for controlling traffic lights (00, 01 11 for green, yellow, red)
               L1,  // light for NB SW 4th Avenue 
               L2,  // light for EB SW Harrison Street 
               L3;  // light for WB SW Harrison Street

input Clock, Reset;
                     // sensors for approaching vehicles
input S1,            // Northbound on SW 4th Avenue
      S2,            // Eastbound on SW Harrison Street 
      S3;            // Westbound on SW Harrison Street
      
reg load,count;  
wire timeup;
reg [7:0] value;
parameter flash =2'b00,
          green = 2'b01,
          yellow = 2'b10,
          red = 2'b11;  
parameter true = 1'b1;
parameter false = 1'b0;

// State definition        south_to_north    west_to_east
parameter state0 = 6'b000001,     //RED             RED            sensor input check present if s1=0,s2=0,s3=0   loop in same state else if s2 or s3 on go to s1 else go to s4  
          state1 = 6'b000010,     //RED             GREEN          no sensor input check in this state go to s2
          state2 = 6'b000100,     //RED             YELLOW         no sensor input check in this state go to s3
          state3 = 6'b001000,     //RED             RED            no sensor input check in this state go to s4 
          state4 = 6'b010000,     //GREEN           RED            if s1=1 then loop in same state else go to s0       
          state5 = 6'b100000;     //YELLOW          RED            no sensor input check next sate will be st0        
                 
       
reg [5:0] state, next_state;
counter instantiate(Clock, load, value, count, timeup1); 
// Change of state is only at positive edge of clock 

initial
begin
$monitor( "%b",  value);
end

        always@(posedge Clock) 
        begin 
        if (Reset)
        state <= state0;         
        else  
        state <= next_state;   //State change
        end
 
 
      always@(state)
      begin 
      
      case (state)

     state0:     begin
                load=1;
	         value=8'b00000001;      //value of one is passed for the counter  
	        load=0;
                count=1;
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=red;
              L3=red;     
             end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 
     state1:     begin
               load=1;
               value=8'b00001111;                              
               load=0;
                count=1;     
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=green;
              L2=red;
              L3=red;     
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end

     state2:     begin
              load=1;
              value=8'b00000101;   //value of 5 is passed for delay 
              load=0;
               count=1;     
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=yellow;
              L2=red;
              L3=red;     
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 

     state3:     begin 
              value=8'b00000001;      //value of one is passed for delay
              load=1;
              load=0;
              count=1;     
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=red;
              L3=red;     
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 

     state4:      begin  
               value=8'b00101101;   //value of 45 is passed for delay
               load=1;
               load=0;
               count=1;     
     
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=green;
              L3=green;     
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 

     state5:     begin 
              value=8'b00001111;   //value of 15 is passed for delay
              load=1;
              load=0;
              count=1; 
           if ((L1==green || yellow || red)&&(L2==green || yellow || red)&&(L2==green || yellow || red)) 
              begin
              L1=red;
              L2=yellow;
              L3=yellow;     
              end
           else 
              begin 
              L1=flash;
              L2=flash;
              L3=flash;
             end
           end 
              default:begin
              L1=flash;
              L2=flash;
              L3=flash;
              end
             
     endcase 
  end 


// State machine using case statements 
  always@(state,timeup,S1,S2,S3)
  begin 

       case (state)


                   state0:       begin
                                if(timeup)
                               begin                
                  		if(S1 == false  && (S2==false && S3==false))     
                  		next_state= st0;
                                else if(S1==false ||((S2== false || S3==true)|| (S2== true || S3==false)))
                                next_state = state1;
                  		else if(s1==true &&(s2== false || s3==false))  //check if condition                 
                  		next_state = state4;
                   	       end 
                   	      end	
                             

                   state1:	begin
                                if(timeup)
                                begin
                  		next_state = state2;    
                  		end
                                else
                                next_state=state1;
                                end    

                   state2	begin

                                if(timeup)
                                begin
                   		next_state = state3;
                   		end 
                                else 
                                next_state=state2;
                                end            
  
                   state3: 	begin
                                if(timeup)
                                begin 
                   		next_state = state4; 
                   		end 
                                else
                                next_state=state3;
                                end         

                   state4:	begin 

                                if(timeup)
                                begin              
                		if(S1==true &&(S2==false || S3 == false))       
                   		next_state = state4; 
                                else 
                                next_state = state5; 
                  		end
                               else
                                next_state = state4;
                                end    

                   state5:      begin  
                                 if(timeup)
                                 begin  
                   		next_state = state0; 
                   		end
                               else
                                 next_state =state5;
                               end          
                  		default next_state = state0;
     endcase 
 end
 
endmodule

module counter(clk, load, value, count, timeup);
input clk, load, count;
input [7:0] value;
output reg timeup;
reg [7:0] c;
always @(c)
begin
if (c == 0)
timeup = 1;   
else
timeup = 0;        
end
always @(posedge clk)
begin
if (load)
c <= value;
else if (count && (c != 0))
c <= c - 8'b1;
else
c <= c;
end
endmodule
